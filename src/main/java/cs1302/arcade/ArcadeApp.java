package cs1302.arcade;

import java.util.Random;
import javafx.stage.Modality;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.HBox;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.control.Button;
import javafx.event.ActionEvent;
import cs1302.tetris.Tetris;
import cs1302.mancala.Mancala;

/**
 * Application subclass for {@code ArcadeApp}.
 * @version 2019.fa
 */
public class ArcadeApp extends Application {

    Group group = new Group();           // main container
    HBox buttons = new HBox();
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(20, 20); // some rectangle
    Button tetris = new Button("Tetris");
    Button mancala = new Button("Mancala");

    // /**
    //  * Return a mouse event handler that moves to the rectangle to a random
    //  * position any time a mouse event is generated by the associated node.
    //  * @return the mouse event handler
    //  */
    // private EventHandler<? super MouseEvent> createMouseHandler() {
    //     return event -> {
    //         System.out.println(event);
    //         r.setX(rng.nextDouble() * (640 - r.getWidth()));
    //         r.setY(rng.nextDouble() * (480 - r.getHeight()));
    //     };
    // } // createMouseHandler

    // /**
    //  * Return a key event handler that moves to the rectangle to the left
    //  * or the right depending on what key event is generated by the associated
    //  * node.
    //  * @return the key event handler
    //  */
    // private EventHandler<? super KeyEvent> createKeyHandler() {
    //     return event -> {
    //         System.out.println(event);
    //         switch (event.getCode()) {
    //         case LEFT:  // KeyCode.LEFT
    //             r.setX(r.getX() - 10.0);
    //             break;
    //         case RIGHT: // KeyCode.RIGHT
    //             r.setX(r.getX() + 10.0);
    //             break;
    //         default:
    //             // do nothing
    //         } // switch
    //         // TODO bounds checking
    //     };
    // } // createKeyHandler

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {

        /* You are allowed to rewrite this start method, add other methods,
         * files, classes, etc., as needed. This currently contains some
         * simple sample code for mouse and keyboard interactions with a node
         * (rectangle) in a group.
         */

        // r.setX(50);                                // 50px in the x direction (right)
        // r.setY(50);                                // 50ps in the y direction (down)
        // group.getChildren().add(r);                // add to main container
        // r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly
        // group.setOnKeyPressed(createKeyHandler()); // left-right key presses move the rectangle
        Stage tetrisStage = new Stage();
        tetrisStage.initModality(Modality.APPLICATION_MODAL);
        Tetris game = new Tetris();
        EventHandler<ActionEvent> tetrisStart = event -> {
            game.start(tetrisStage);
        };
        tetris.setOnAction(tetrisStart);
        buttons.getChildren().add(tetris);

        Stage mancalaStage = new Stage();
        mancalaStage.initModality(Modality.APPLICATION_MODAL);
        EventHandler<ActionEvent> mancalaStart = event -> {
            Mancala game2 = new Mancala();
            game2.start(mancalaStage);
        };
        mancala.setOnAction(mancalaStart);
        buttons.getChildren().add(mancala);

        group.getChildren().add(buttons);

        StackPane sp = new StackPane();

        sp.getChildren().add(group);

        sp.setId("pane");

        tetris.setTranslateX(-165.0);
        tetris.setTranslateY(500.0);

        tetris.setId("tetris_but");

        mancala.setTranslateX(60.0);
        mancala.setTranslateY(500.0);

        Scene scene = new Scene(sp, 600, 600);
        scene.getStylesheets().addAll("file:src/main/java/cs1302/arcade/style.css");
        stage.setTitle("cs1302-arcade!");
        stage.setScene(scene);
        stage.sizeToScene();
        stage.show();

        // the group must request input focus to receive key events
        // @see https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#requestFocus--
        group.requestFocus();

    } // start

} // ArcadeApp
